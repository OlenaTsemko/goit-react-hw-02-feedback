{"version":3,"sources":["components/Statistics/Statistics.module.scss","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","components/Container/Container.jsx","components/FeedbackWithClass.jsx","App.js","index.js","components/FeedbackOptions/FeedbackOptions.module.scss","components/Section/Section.module.scss","components/Container/Container.module.scss"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","className","styles","feedbackBtnWrapper","map","option","feedbackBtn","onClick","Statistics","good","neutral","bad","total","positivePercentage","statisticsList","statisticsItem","statisticsText","Section","title","children","sectionTitle","Notification","message","Container","FeedbackWithClass","state","countLeftFeedbackHandler","value","setState","prevState","countTotalFeedback","arrayOfValues","reduce","acc","countPositiveFeedbackPercentage","Math","round","this","keys","Object","values","positivePercent","Component","App","useState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e03ab7ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticsList\":\"Statistics_statisticsList__1tBLQ\",\"statisticsItem\":\"Statistics_statisticsItem__3PvvG\",\"statisticsText\":\"Statistics_statisticsText__3GFEK\"};","import styles from './FeedbackOptions.module.scss';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <div className={styles.feedbackBtnWrapper}>\n    {options.map(option => (\n      <button\n        className={styles.feedbackBtn}\n        key={option}\n        onClick={() => onLeaveFeedback(`${option}`)}\n      >\n        {option}\n      </button>\n    ))}\n  </div>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import styles from './Statistics.module.scss';\n\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <ul className={styles.statisticsList}>\n    <li className={styles.statisticsItem}>\n      <span className={styles.statisticsText}>Good: </span>\n      {good}\n    </li>\n    <li className={styles.statisticsItem}>\n      <span className={styles.statisticsText}>Neutral: </span>\n      {neutral}\n    </li>\n    <li className={styles.statisticsItem}>\n      <span className={styles.statisticsText}>Bad: </span>\n      {bad}\n    </li>\n    <li className={styles.statisticsItem}>\n      <span className={styles.statisticsText}>Total: </span>\n      {total}\n    </li>\n    <li className={styles.statisticsItem}>\n      <span className={styles.statisticsText}>Positive feedback: </span>\n      {positivePercentage}%\n    </li>\n  </ul>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import styles from './Section.module.scss';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <section className={styles.Section}>\n    <h2 className={styles.sectionTitle}>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import styles from './Container.module.scss';\nimport PropTypes from 'prop-types';\n\nconst Container = ({ children }) => (\n  <div className={styles.Container}>{children}</div>\n);\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import { Component } from 'react';\n\nimport FeedbackOptions from 'components/FeedbackOptions';\nimport Statistics from 'components/Statistics';\nimport Section from 'components/Section';\nimport Notification from 'components/Notification';\nimport Container from 'components/Container';\n\nclass FeedbackWithClass extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countLeftFeedbackHandler = value => {\n    this.setState(prevState => ({\n      [value]: prevState[value] + 1,\n    }));\n  };\n\n  countTotalFeedback = arrayOfValues =>\n    arrayOfValues.reduce((acc, value) => acc + value, 0);\n\n  countPositiveFeedbackPercentage = (good, total) =>\n    Math.round((good / total) * 100);\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    const keys = Object.keys(this.state);\n    const values = Object.values(this.state);\n    const total = this.countTotalFeedback(values);\n    const positivePercent = this.countPositiveFeedbackPercentage(good, total);\n\n    return (\n      <div className=\"App\">\n        <h1>React hw 2 - Feedback with Class</h1>\n\n        <Container>\n          <Section title=\"Please leave feedback\">\n            <FeedbackOptions\n              options={keys}\n              onLeaveFeedback={this.countLeftFeedbackHandler}\n            />\n          </Section>\n\n          <Section title=\"Statistics\">\n            {total > 0 ? (\n              <Statistics\n                good={good}\n                neutral={neutral}\n                bad={bad}\n                total={total}\n                positivePercentage={positivePercent}\n              />\n            ) : (\n              <Notification message=\"No feedback given\" />\n            )}\n          </Section>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default FeedbackWithClass;\n","import { useState } from 'react';\n\nimport FeedbackOptions from 'components/FeedbackOptions';\nimport Statistics from 'components/Statistics';\nimport Section from 'components/Section';\nimport Notification from 'components/Notification';\nimport Container from 'components/Container';\n\nimport FeedbackWithClass from 'components/FeedbackWithClass';\n\nimport './App.scss';\n\nconst App = () => {\n  const [state, setState] = useState({\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  });\n\n  const { good, neutral, bad } = state;\n\n  const countLeftFeedbackHandler = value =>\n    setState(prevState => ({\n      ...state,\n      [value]: prevState[value] + 1,\n    }));\n\n  const countTotalFeedback = arrayOfValues =>\n    arrayOfValues.reduce((acc, value) => acc + value, 0);\n\n  const countPositiveFeedbackPercentage = () =>\n    Math.round((good / total) * 100);\n\n  const keys = Object.keys(state);\n  const values = Object.values(state);\n  const total = countTotalFeedback(values);\n  const positivePercentage = countPositiveFeedbackPercentage();\n\n  return (\n    <div className=\"App\">\n      <h1>React hw 2 - Feedback with Hook</h1>\n\n      <Container>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={keys}\n            onLeaveFeedback={countLeftFeedbackHandler}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {total > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </Container>\n\n      <FeedbackWithClass />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './index.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedbackBtnWrapper\":\"FeedbackOptions_feedbackBtnWrapper__3BMZ3\",\"feedbackBtn\":\"FeedbackOptions_feedbackBtn__2zG-Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"Section_Section__CAdMt\",\"sectionTitle\":\"Section_sectionTitle__3mOXh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__3Jo_x\"};"],"sourceRoot":""}